// This file is generated by Sim IDX. Do not edit manually.
import { pgEnum, pgTable as table } from "drizzle-orm/pg-core";
import * as t from "drizzle-orm/pg-core";
import { db, types } from "@duneanalytics/sim-idx";

export const dexTrade = table("dex_trade", {
  chainId: db.uint64('chain_id'),
  blockNumber: db.uint256('block_number'),
  blockTimestamp: db.uint256('block_timestamp'),
  transactionHash: db.bytes32('transaction_hash'),
  dex: t.text('dex'),
  fromToken: db.address('from_token'),
  fromTokenAmt: db.uint256('from_token_amt'),
  fromTokenName: t.text('from_token_name'),
  fromTokenSymbol: t.text('from_token_symbol'),
  fromTokenDecimals: db.uint8('from_token_decimals'),
  toToken: db.address('to_token'),
  toTokenAmt: db.uint256('to_token_amt'),
  toTokenName: t.text('to_token_name'),
  toTokenSymbol: t.text('to_token_symbol'),
  toTokenDecimals: db.uint8('to_token_decimals'),
  txnOriginator: db.address('txn_originator'),
  recipient: db.address('recipient'),
  liquidityPool: db.address('liquidity_pool'),
})

export const tornadoDeposit = table("tornado_deposit", {
  chainId: db.uint64('chain_id'),
  transactionHash: db.bytes32('transaction_hash'),
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  txnOriginator: db.address('txn_originator'),
  contractAddress: db.address('contract_address'),
  commitment: db.bytes32('commitment'),
  leafIndex: db.uint32('leaf_index'),
  timestamp: db.uint256('timestamp'),
  amount: db.uint256('amount'),
  currency: t.text('currency'),
  denomination: t.text('denomination'),
  protocol: t.text('protocol'),
})

export const tornadoWithdrawal = table("tornado_withdrawal", {
  chainId: db.uint64('chain_id'),
  transactionHash: db.bytes32('transaction_hash'),
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  txnOriginator: db.address('txn_originator'),
  contractAddress: db.address('contract_address'),
  to: db.address('to'),
  nullifierHash: db.bytes32('nullifier_hash'),
  relayer: db.address('relayer'),
  fee: db.uint256('fee'),
  amount: db.uint256('amount'),
  currency: t.text('currency'),
  denomination: t.text('denomination'),
  protocol: t.text('protocol'),
})

export const uniswapV2Swap = table("uniswap_v2_swap", {
  chainId: db.uint64('chain_id'),
  transactionHash: db.bytes32('transaction_hash'),
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  txnOriginator: db.address('txn_originator'),
  liquidityPool: db.address('liquidity_pool'),
  recipient: db.address('recipient'),
  dex: t.text('dex'),
  fromToken: db.address('from_token'),
  fromTokenAmt: db.uint256('from_token_amt'),
  fromTokenName: t.text('from_token_name'),
  fromTokenSymbol: t.text('from_token_symbol'),
  fromTokenDecimals: db.uint8('from_token_decimals'),
  toToken: db.address('to_token'),
  toTokenAmt: db.uint256('to_token_amt'),
  toTokenName: t.text('to_token_name'),
  toTokenSymbol: t.text('to_token_symbol'),
  toTokenDecimals: db.uint8('to_token_decimals'),
})

export const uniswapV3Swap = table("uniswap_v3_swap", {
  chainId: db.uint64('chain_id'),
  transactionHash: db.bytes32('transaction_hash'),
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  txnOriginator: db.address('txn_originator'),
  liquidityPool: db.address('liquidity_pool'),
  recipient: db.address('recipient'),
  dex: t.text('dex'),
  fromToken: db.address('from_token'),
  fromTokenAmt: db.uint256('from_token_amt'),
  fromTokenName: t.text('from_token_name'),
  fromTokenSymbol: t.text('from_token_symbol'),
  fromTokenDecimals: db.uint8('from_token_decimals'),
  toToken: db.address('to_token'),
  toTokenAmt: db.uint256('to_token_amt'),
  toTokenName: t.text('to_token_name'),
  toTokenSymbol: t.text('to_token_symbol'),
  toTokenDecimals: db.uint8('to_token_decimals'),
})
